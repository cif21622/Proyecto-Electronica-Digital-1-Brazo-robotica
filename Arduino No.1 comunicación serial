#include <EEPROM.h>
#include <LiquidCrystal.h>

// Inicializa la biblioteca con los números de los pines de interfaz
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

const int botonPin = 2; // Botón conectado al pin digital 2
int posiciones[4];
int estadoAnteriorBoton = HIGH;

int mensaje = 0;
unsigned long tiempoAnterior;

void setup() {
  
DDRB = B00100000; 
Serial.begin(9600);

cli(); //Detener interrupciones hasta configurar todo
  TCCR1A = 0; // set entire TCCR1A register to 0
  TCCR1B = 0; // same for TCCR1B
  TCNT1  = 0; // initialize counter value to 0
  // set compare match register for 2 Hz increments
  OCR1A = 31249; // = 16000000 / (256 * 2) - 1 (must be <65536)
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
  // Set CS12, CS11 and CS10 bits for 256 prescaler
  TCCR1B |= (1 << CS12) | (0 << CS11) | (0 << CS10);
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);
  sei(); // Permitir interrupciones


  pinMode(botonPin, INPUT_PULLUP);
  // Configurar registros ADC según sea necesario para tu hardware y sensores
  ADMUX = _BV(REFS0); // AVcc con condensador en AREF
  ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // Habilitar ADC y preescalado /128
  
  // Configura el número de columnas y filas de la LCD
  lcd.begin(16, 2);
}

void loop() {
  for (int i = 0; i < 4; i++) {
    ADMUX = (ADMUX & 0xF8) | i; // Seleccionar canal ADC
    ADCSRA |= _BV(ADSC); // Iniciar conversión
    while (ADCSRA & _BV(ADSC)); // Esperar hasta que se complete la conversión

    int lectura = ADC;
    posiciones[i] = map(lectura, 0, 1023, 10, 150);

    Serial.write(posiciones[i]);
    delay(50);
  }

  bool estadoBoton = digitalRead(botonPin);
  if (!estadoBoton && estadoBoton != estadoAnteriorBoton) {
    delay(50);
    estadoBoton = digitalRead(botonPin);
    if (!estadoBoton) {
      int primerByte = EEPROM.read(0);
      if (primerByte == 0) {
        EEPROM.write(0, 1);
        for (int j = 0; j < 4; j++) {
          EEPROM.put(j * sizeof(int) + 1, posiciones[j]);
        }
      } else {
        for (int j = 0; j < 4; j++) {
          EEPROM.get(j * sizeof(int) + 1, posiciones[j]);
        }
        EEPROM.write(0, 0);
      }
      Serial.write(255);
    }
  }
  estadoAnteriorBoton = estadoBoton;

  if (millis() - tiempoAnterior > 4000) {
    tiempoAnterior = millis();
    lcd.clear();
    lcd.setCursor(0, 0);
    switch (mensaje) {
      case 0: 
        lcd.print("Proyecto");
        lcd.setCursor(0, 1);
        lcd.print("Final");
        break;
      case 1:
        lcd.print("Electronica");
        lcd.setCursor(0, 1);
        lcd.print("Digital 1");
        break;
      case 2:
        lcd.print("Brazo");
        lcd.setCursor(0, 1);
        lcd.print("Robotico");
        break;
      case 3:
        lcd.print("Ernesto Chavez");
        lcd.setCursor(0, 1);
        lcd.print("21441");
        break;
      case 4:
        lcd.print("Cesar Cifuentes");
        lcd.setCursor(0, 1);
        lcd.print("21622");
        break;
    }
    mensaje++;
    if (mensaje > 4) mensaje = 0;
  }
}

ISR(TIMER1_COMPA_vect){
  cli(); 
  PORTB ^= 0b00100000; //Cambiar el estado del bit PB5
  TCNT1 = 0; //Resetear el timer en 0 nuevamente
  sei(); // Habilitar interrupciones globales
}


  sei();  // Habilitar interrupciones globales
}
